data.frame(circle = "outer", make_circle(radius = 2, num_points = 100))
)
circle_data <- rbind(
data.frame(circle = "inner", noisy_inner_circle),
data.frame(circle = "outer",noisy_outer_circle)
)
circle_data
# Toy dataset testing
make_noisy_circle <- function(radius, num_points, noise_sd = 0.05) {
theta <- runif(num_points, 0, 2 * pi)
x <- radius * cos(theta) + rnorm(num_points, sd = noise_sd)
y <- radius * sin(theta) + rnorm(num_points, sd = noise_sd)
data.frame(x = x, y = y)
}
# 生成有噪音的內圈和外圈
noisy_inner_circle <- make_noisy_circle(radius = 1, num_points = 100)
noisy_outer_circle <- make_noisy_circle(radius = 2, num_points = 100)
circle_data <- rbind(
data.frame(circle = "inner", noisy_inner_circle),
data.frame(circle = "outer",noisy_outer_circle)
)
library
library(ggplot)
library(ggplot2)
ggplot(circle_data)+geom_point(aes(x = x, y = y, color = circle))
noisy_outer_circle <- make_noisy_circle(radius = 2, num_points = 1000)
# 生成有噪音的內圈和外圈
noisy_inner_circle <- make_noisy_circle(radius = 1, num_points = 1000)
noisy_outer_circle <- make_noisy_circle(radius = 2, num_points = 1000)
circle_data <- rbind(
data.frame(circle = "inner", noisy_inner_circle),
data.frame(circle = "outer",noisy_outer_circle)
)
library(ggplot2)
ggplot(circle_data)+geom_point(aes(x = x, y = y, color = circle))
# Toy dataset testing
make_noisy_circle <- function(radius, num_points, noise_sd = 0.05) {
theta <- runif(num_points, 0, 2 * pi)
x <- radius * cos(theta) + rnorm(num_points, sd = noise_sd)
y <- radius * sin(theta) + rnorm(num_points, sd = noise_sd)
data.frame(x = x, y = y)
}
# 生成有噪音的內圈和外圈
noisy_inner_circle <- make_noisy_circle(radius = 1, num_points = 1000)
noisy_outer_circle <- make_noisy_circle(radius = 2, num_points = 1000)
circle_data <- rbind(
data.frame(circle = "inner", noisy_inner_circle),
data.frame(circle = "outer",noisy_outer_circle)
)
library(ggplot2)
ggplot(circle_data)+geom_point(aes(x = x, y = y, color = circle))
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = iris[,1:4],
intervals = 4,
percent_overlap = 50,
num_bins_when_clustering = 10,
methods = "dbscan",
method_params = list(eps = 0.5, minPts = 5)
)
})
time_taken
Graph <- graph.adjacency(Mapper$adjacency, mode="undirected")
l = length(V(Graph))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Distribution of specific variable in each vertex Majority vote
var.maj.vertex <- c()
filter.vertex <- c()
for (i in 1:l){
points.in.vertex <- Mapper$points_in_vertex[[i]]
Mode.in.vertex <- Mode(iris$Species[points.in.vertex])
var.maj.vertex <- c(var.maj.vertex,as.character(Mode.in.vertex))
# filter.vertex <- c(filter.vertex,mean(filter.kde[points.in.vertex]))
}
# Size
vertex.size <- rep(0,l)
for (i in 1:l){
points.in.vertex <- Mapper$points_in_vertex[[i]]
vertex.size[i] <- length((Mapper$points_in_vertex[[i]]))
}
MapperNodes <- mapperVertices(Mapper, 1:nrow(iris))
MapperNodes$var.maj.vertex <- as.factor(var.maj.vertex)
# MapperNodes$filter.kde <- filter.vertex
MapperNodes$Nodesize <- vertex.size
MapperLinks <- mapperEdges(Mapper)
forceNetwork(Nodes = MapperNodes, Links = MapperLinks, Target = "Linktarget",
Value = "Linkvalue", NodeID = "Nodename", Nodesize = "Nodesize",
Group = "var.maj.vertex", opacity = 1, zoom = TRUE,
linkDistance = 10, charge = -10, legend = TRUE)
circle_data[,1:2]
circle_data[,2:3]
time_taken <- system.time({
Mapper <- MapperAlgo(
# filter_values = iris[,1:4],
filter_values = circle_data[,2:3],
intervals = 4,
percent_overlap = 50,
num_bins_when_clustering = 10,
methods = "dbscan",
method_params = list(eps = 0.5, minPts = 5)
)
})
time_taken
Graph <- graph.adjacency(Mapper$adjacency, mode="undirected")
l = length(V(Graph))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Distribution of specific variable in each vertex Majority vote
var.maj.vertex <- c()
filter.vertex <- c()
for (i in 1:l){
points.in.vertex <- Mapper$points_in_vertex[[i]]
Mode.in.vertex <- Mode(iris$Species[points.in.vertex])
var.maj.vertex <- c(var.maj.vertex,as.character(Mode.in.vertex))
# filter.vertex <- c(filter.vertex,mean(filter.kde[points.in.vertex]))
}
# Size
vertex.size <- rep(0,l)
for (i in 1:l){
points.in.vertex <- Mapper$points_in_vertex[[i]]
vertex.size[i] <- length((Mapper$points_in_vertex[[i]]))
}
MapperNodes <- mapperVertices(Mapper, 1:nrow(iris))
MapperNodes$var.maj.vertex <- as.factor(var.maj.vertex)
# MapperNodes$filter.kde <- filter.vertex
MapperNodes$Nodesize <- vertex.size
MapperLinks <- mapperEdges(Mapper)
forceNetwork(Nodes = MapperNodes, Links = MapperLinks, Target = "Linktarget",
Value = "Linkvalue", NodeID = "Nodename", Nodesize = "Nodesize",
Group = "var.maj.vertex", opacity = 1, zoom = TRUE,
linkDistance = 10, charge = -10, legend = TRUE)
forceNetwork(Nodes = MapperNodes, Links = MapperLinks, Target = "Linktarget",
Value = "Linkvalue", NodeID = "Nodename", Nodesize = "Nodesize",
Group = "var.maj.vertex", opacity = 1, zoom = TRUE,
linkDistance = 20, charge = -10, legend = TRUE)
forceNetwork?
x
?forceNetwork
forceNetwork(Nodes = MapperNodes, Links = MapperLinks, Target = "Linktarget",
Value = "Linkvalue", NodeID = "Nodename", Nodesize = "Nodesize",
Group = "var.maj.vertex", opacity = 1, zoom = TRUE,
radiusCalculation = JS("Math.sqrt(d.nodesize) + 2"),
linkDistance = 20, charge = -10, legend = TRUE)
forceNetwork(Nodes = MapperNodes, Links = MapperLinks, Target = "Linktarget",
Value = "Linkvalue", NodeID = "Nodename", Nodesize = "Nodesize",
Group = "var.maj.vertex", opacity = 1, zoom = TRUE,
radiusCalculation = JS("Math.sqrt(d.nodesize)"),
linkDistance = 20, charge = -10, legend = TRUE)
forceNetwork(Nodes = MapperNodes, Links = MapperLinks, Target = "Linktarget",
Value = "Linkvalue", NodeID = "Nodename", Nodesize = "Nodesize",
Group = "var.maj.vertex", opacity = 1, zoom = TRUE,
radiusCalculation = JS("Math.sqrt(d.nodesize)"),
linkDistance = 100, charge = -10, legend = TRUE)
forceNetwork(Nodes = MapperNodes, Links = MapperLinks, Target = "Linktarget",
Value = "Linkvalue", NodeID = "Nodename", Nodesize = "Nodesize",
Group = "var.maj.vertex", opacity = 1, zoom = TRUE,
radiusCalculation = JS("Math.sqrt(d.nodesize)"),
linkDistance = 30, charge = -10, legend = TRUE)
circle_data[1]
forceNetwork(Nodes = MapperNodes, Links = MapperLinks, Target = "Linktarget",
Value = "Linkvalue", NodeID = "Nodename", Nodesize = "Nodesize",
Group = "var.maj.vertex", opacity = 1, zoom = TRUE,
radiusCalculation = JS("Math.sqrt(d.nodesize)"),
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);"),
linkDistance = 30, charge = -10, legend = TRUE)
forceNetwork(
Nodes = MapperNodes,
Links = MapperLinks,
Source = "Linksource",
Target = "Linktarget",
Value = "Linkvalue",
NodeID = "Nodename",
Nodesize = "Nodesize",
Group = "var.maj.vertex", # 使用 circle_data[1] 的分組信息
opacity = 1,
zoom = TRUE,
radiusCalculation = JS("Math.sqrt(d.nodesize)"),
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);"),
linkDistance = 30,
charge = -10,
legend = TRUE
)
# Size
vertex.size <- rep(0,l)
for (i in 1:l){
points.in.vertex <- Mapper$points_in_vertex[[i]]
vertex.size[i] <- length((Mapper$points_in_vertex[[i]]))
}
MapperNodes <- mapperVertices(Mapper, 1:nrow(iris))
circle_group <- circle_data$circle
group_by_vertex <- c()
for (i in 1:length(MapperNodes$Vertex)) {
points_in_vertex <- Mapper$points_in_vertex[[i]]
group_by_vertex <- c(group_by_vertex, Mode(circle_group[points_in_vertex]))
}
MapperNodes$var.maj.vertex <- as.factor(group_by_vertex)
vertex_size <- sapply(Mapper$points_in_vertex, length)
# MapperNodes$var.maj.vertex <- as.factor(var.maj.vertex)
MapperNodes$Nodesize <- vertex.size
MapperLinks <- mapperEdges(Mapper)
forceNetwork(
Nodes = MapperNodes,
Links = MapperLinks,
Source = "Linksource",
Target = "Linktarget",
Value = "Linkvalue",
NodeID = "Nodename",
Nodesize = "Nodesize",
Group = "var.maj.vertex", # 使用 circle_data[1] 的分組信息
opacity = 1,
zoom = TRUE,
radiusCalculation = JS("Math.sqrt(d.nodesize)"),
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);"),
linkDistance = 30,
charge = -10,
legend = TRUE
)
library(networkD3)
library(igraph)
source('R/EdgeVertices.R')
source('R/ConvertLevelsets.R')
source('R/Cover.R')
source('R/Cluster.R')
source('R/SimplicialComplex.R')
source('R/MapperAlgo.R')
# Toy dataset testing
make_noisy_circle <- function(radius, num_points, noise_sd = 0.05) {
theta <- runif(num_points, 0, 2 * pi)
x <- radius * cos(theta) + rnorm(num_points, sd = noise_sd)
y <- radius * sin(theta) + rnorm(num_points, sd = noise_sd)
data.frame(x = x, y = y)
}
# 生成有噪音的內圈和外圈
noisy_inner_circle <- make_noisy_circle(radius = 1, num_points = 1000)
noisy_outer_circle <- make_noisy_circle(radius = 2, num_points = 1000)
circle_data <- rbind(
data.frame(circle = "inner", noisy_inner_circle),
data.frame(circle = "outer",noisy_outer_circle)
)
library(ggplot2)
ggplot(circle_data)+geom_point(aes(x = x, y = y, color = circle))
# 建立圖形節點數據
MapperNodes <- mapperVertices(Mapper, 1:nrow(circle_data)) # 將 circle_data 的索引傳遞
time_taken <- system.time({
Mapper <- MapperAlgo(
# filter_values = iris[,1:4],
filter_values = circle_data[,2:3],
intervals = 4,
percent_overlap = 50,
num_bins_when_clustering = 10,
methods = "dbscan",
method_params = list(eps = 0.5, minPts = 5)
)
})
# 建立圖形節點數據
MapperNodes <- mapperVertices(Mapper, 1:nrow(circle_data)) # 將 circle_data 的索引傳遞
# 分組信息來自 circle_data[1]
circle_group <- circle_data$circle
group_by_vertex <- c()
for (i in 1:length(MapperNodes$Vertex)) {
points_in_vertex <- Mapper$points_in_vertex[[i]]
group_by_vertex <- c(group_by_vertex, Mode(circle_group[points_in_vertex]))
}
# 添加分組信息到 MapperNodes
MapperNodes$var.maj.vertex <- as.factor(group_by_vertex)
# 計算節點大小
vertex_size <- sapply(Mapper$points_in_vertex, length)
MapperNodes$Nodesize <- vertex_size
# 建立邊數據
MapperLinks <- mapperEdges(Mapper)
# 使用 forceNetwork 繪圖
forceNetwork(
Nodes = MapperNodes,
Links = MapperLinks,
Source = "Linksource",
Target = "Linktarget",
Value = "Linkvalue",
NodeID = "Nodename",
Nodesize = "Nodesize",
Group = "var.maj.vertex", # 使用 circle_data[1] 的分組信息
opacity = 1,
zoom = TRUE,
radiusCalculation = JS("Math.sqrt(d.nodesize)"),
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);"),
linkDistance = 30,
charge = -10,
legend = TRUE
)
# 建立圖形節點數據
MapperNodes <- mapperVertices(Mapper, 1:nrow(circle_data)) # 將 circle_data 的索引傳遞
MapperNodes
# 分組信息來自 circle_data[1]
circle_group <- circle_data$circle
circle_group
group_by_vertex <- c()
for (i in 1:length(MapperNodes$Vertex)) {
points_in_vertex <- Mapper$points_in_vertex[[i]]
group_by_vertex <- c(group_by_vertex, Mode(circle_group[points_in_vertex]))
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
for (i in 1:length(MapperNodes$Vertex)) {
points_in_vertex <- Mapper$points_in_vertex[[i]]
group_by_vertex <- c(group_by_vertex, Mode(circle_group[points_in_vertex]))
}
for (i in 1:length(MapperNodes$Vertex)) {
points_in_vertex <- Mapper$points_in_vertex[[i]]
group_by_vertex <- c(group_by_vertex, Mode(circle_group[points_in_vertex]))
}
# Toy dataset testing
make_noisy_circle <- function(radius, num_points, noise_sd = 0.05) {
theta <- runif(num_points, 0, 2 * pi)
x <- radius * cos(theta) + rnorm(num_points, sd = noise_sd)
y <- radius * sin(theta) + rnorm(num_points, sd = noise_sd)
data.frame(x = x, y = y)
}
# 生成有噪音的內圈和外圈
noisy_inner_circle <- make_noisy_circle(radius = 1, num_points = 1000)
noisy_outer_circle <- make_noisy_circle(radius = 2, num_points = 1000)
circle_data <- rbind(
data.frame(circle = "inner", noisy_inner_circle),
data.frame(circle = "outer",noisy_outer_circle)
)
library(ggplot2)
ggplot(circle_data)+geom_point(aes(x = x, y = y, color = circle))
time_taken <- system.time({
Mapper <- MapperAlgo(
# filter_values = iris[,1:4],
filter_values = circle_data[,2:3],
intervals = 4,
percent_overlap = 50,
num_bins_when_clustering = 10,
methods = "dbscan",
method_params = list(eps = 0.5, minPts = 5)
)
})
time_taken
Graph <- graph.adjacency(Mapper$adjacency, mode="undirected")
l = length(V(Graph))
library(networkD3)
library(igraph)
source('R/EdgeVertices.R')
source('R/ConvertLevelsets.R')
source('R/Cover.R')
source('R/Cluster.R')
source('R/SimplicialComplex.R')
source('R/MapperAlgo.R')
time_taken <- system.time({
Mapper <- MapperAlgo(
# filter_values = iris[,1:4],
filter_values = circle_data[,2:3],
intervals = 4,
percent_overlap = 50,
num_bins_when_clustering = 10,
methods = "dbscan",
method_params = list(eps = 0.5, minPts = 5)
)
})
time_taken
Graph <- graph.adjacency(Mapper$adjacency, mode="undirected")
l = length(V(Graph))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Distribution of specific variable in each vertex Majority vote
var.maj.vertex <- c()
filter.vertex <- c()
for (i in 1:l){
points.in.vertex <- Mapper$points_in_vertex[[i]]
Mode.in.vertex <- Mode(iris$Species[points.in.vertex])
var.maj.vertex <- c(var.maj.vertex,as.character(Mode.in.vertex))
# filter.vertex <- c(filter.vertex,mean(filter.kde[points.in.vertex]))
}
# Size
vertex.size <- rep(0,l)
for (i in 1:l){
points.in.vertex <- Mapper$points_in_vertex[[i]]
vertex.size[i] <- length((Mapper$points_in_vertex[[i]]))
}
MapperNodes <- mapperVertices(Mapper, 1:nrow(iris))
MapperNodes$var.maj.vertex <- as.factor(var.maj.vertex)
MapperNodes$Nodesize <- vertex.size
MapperLinks <- mapperEdges(Mapper)
forceNetwork(
Nodes = MapperNodes,
Links = MapperLinks,
Source = "Linksource",
Target = "Linktarget",
Value = "Linkvalue",
NodeID = "Nodename",
Nodesize = "Nodesize",
Group = "var.maj.vertex", # 使用 circle_data[1] 的分組信息
opacity = 1,
zoom = TRUE,
radiusCalculation = JS("Math.sqrt(d.nodesize)"),
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);"),
linkDistance = 30,
charge = -10,
legend = TRUE
)
?forceNetwork
source('R/EdgeVertices.R')
source('R/ConvertLevelsets.R')
source('R/Cover.R')
source('R/Cluster.R')
source('R/SimplicialComplex.R')
source('R/MapperAlgo.R')
# Toy dataset testing
make_noisy_circle <- function(radius, num_points, noise_sd = 0.05) {
theta <- runif(num_points, 0, 2 * pi)
x <- radius * cos(theta) + rnorm(num_points, sd = noise_sd)
y <- radius * sin(theta) + rnorm(num_points, sd = noise_sd)
data.frame(x = x, y = y)
}
# 生成有噪音的內圈和外圈
noisy_inner_circle <- make_noisy_circle(radius = 1, num_points = 1000)
noisy_outer_circle <- make_noisy_circle(radius = 2, num_points = 1000)
circle_data <- rbind(
data.frame(circle = "inner", noisy_inner_circle),
data.frame(circle = "outer",noisy_outer_circle)
)
library(ggplot2)
ggplot(circle_data)+geom_point(aes(x = x, y = y, color = circle))
time_taken <- system.time({
Mapper <- MapperAlgo(
# filter_values = iris[,1:4],
filter_values = circle_data[,2:3],
intervals = 4,
percent_overlap = 50,
num_bins_when_clustering = 10,
methods = "dbscan",
method_params = list(eps = 0.5, minPts = 5)
)
})
Graph <- graph.adjacency(Mapper$adjacency, mode="undirected")
l = length(V(Graph))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Distribution of specific variable in each vertex Majority vote
var.maj.vertex <- c()
filter.vertex <- c()
circle_groups <- as.character(circle_data$circle)
for (i in 1:l){
points.in.vertex <- Mapper$points_in_vertex[[i]]
# Mode.in.vertex <- Mode(iris$Species[points.in.vertex])
Mode.in.vertex <- Mode(circle_groups[points.in.vertex])
var.maj.vertex <- c(var.maj.vertex,as.character(Mode.in.vertex))
}
# Add information to the nodes
MapperNodes <- mapperVertices(Mapper, 1:nrow(circle_data))
MapperNodes$Group <- as.factor(var.maj.vertex)
# Size
vertex.size <- rep(0,l)
for (i in 1:l){
points.in.vertex <- Mapper$points_in_vertex[[i]]
vertex.size[i] <- length((Mapper$points_in_vertex[[i]]))
}
MapperNodes <- mapperVertices(Mapper, 1:nrow(iris))
MapperNodes$var.maj.vertex <- as.factor(var.maj.vertex)
MapperNodes$Nodesize <- vertex.size
MapperLinks <- mapperEdges(Mapper)
forceNetwork(
Nodes = MapperNodes,
Links = MapperLinks,
Source = "Linksource",
Target = "Linktarget",
Value = "Linkvalue",
NodeID = "Nodename",
Nodesize = "Nodesize",
Group = "var.maj.vertex", # 使用 circle_data[1] 的分組信息
opacity = 1,
zoom = TRUE,
radiusCalculation = JS("Math.sqrt(d.nodesize)"),
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);"),
linkDistance = 30,
charge = -10,
legend = TRUE
)
ggplot(circle_data)+geom_point(aes(x = x, y = y, color = circle))
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
R CMD check MapperAlgo_1.0.1.tar.gz
devtools::document()
devtools::document()
rm man/MapperAlgo.Rd
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::submit_cran()
usethis::use_cran_comments()
devtools::document()
devtools::document()
devtools::build()
devtools::submit_cran()
devtools::build()
devtools::submit_cran()
