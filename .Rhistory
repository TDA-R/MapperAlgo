}
}
save_mapper_png <- function(widget, png_path, vwidth = 1200, vheight = 900, zoom = 2, delay = 0.5) {
tmp_html <- tempfile(fileext = ".html")
on.exit(try(unlink(tmp_html), silent = TRUE), add = TRUE)
htmlwidgets::saveWidget(widget, tmp_html, selfcontained = TRUE)
webshot2::webshot(tmp_html, file = png_path, vwidth = vwidth, vheight = vheight, zoom = zoom, delay = delay)
}
for (w in width_vec) {
for (ov in overlap_vec) {
cat(sprintf(">> cover=%s, width=%.2f, overlap=%d%% ...\n", cover_type, w, ov))
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values   = circle_data[, c("x", "y")],
percent_overlap = ov,
methods         = "dbscan",
method_params   = list(eps = 0.3, minPts = 1),
cover_type = cover_type,
interval_width = w,
num_cores = num_cores
)
})
# 生成互動圖（不存 html，只為了截圖）
wdg <- MapperPlotter(
Mapper,
circle_data$circle,
circle_data,
type = "forceNetwork"
)
png_file <- file.path(out_dir, sprintf("mapper_%s_w%.2f_ov%02d.png", cover_type, w, ov))
save_mapper_png(wdg, png_file, vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
cat("   saved:", png_file, " | elapsed:", round(time_taken["elapsed"], 2), "sec\n")
gc()
}
}
library(htmlwidgets)
for (w in width_vec) {
for (ov in overlap_vec) {
cat(sprintf(">> cover=%s, width=%.2f, overlap=%d%% ...\n", cover_type, w, ov))
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values   = circle_data[, c("x", "y")],
percent_overlap = ov,
methods         = "dbscan",
method_params   = list(eps = 0.3, minPts = 1),
cover_type = cover_type,
interval_width = w,
num_cores = num_cores
)
})
# 生成互動圖（不存 html，只為了截圖）
wdg <- MapperPlotter(
Mapper,
circle_data$circle,
circle_data,
type = "forceNetwork"
)
png_file <- file.path(out_dir, sprintf("mapper_%s_w%.2f_ov%02d.png", cover_type, w, ov))
save_mapper_png(wdg, png_file, vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
cat("   saved:", png_file, " | elapsed:", round(time_taken["elapsed"], 2), "sec\n")
gc()
}
}
install.packages("webshot2")
library(htmlwidgets)
save_mapper_png <- function(widget, png_path, vwidth = 1200, vheight = 900, zoom = 2, delay = 0.5) {
tmp_html <- tempfile(fileext = ".html")
on.exit(try(unlink(tmp_html), silent = TRUE), add = TRUE)
htmlwidgets::saveWidget(widget, tmp_html, selfcontained = TRUE)
webshot2::webshot(tmp_html, file = png_path, vwidth = vwidth, vheight = vheight, zoom = zoom, delay = delay)
}
for (w in width_vec) {
for (ov in overlap_vec) {
cat(sprintf(">> cover=%s, width=%.2f, overlap=%d%% ...\n", cover_type, w, ov))
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values   = circle_data[, c("x", "y")],
percent_overlap = ov,
methods         = "dbscan",
method_params   = list(eps = 0.3, minPts = 1),
cover_type = cover_type,
interval_width = w,
num_cores = num_cores
)
})
# 生成互動圖（不存 html，只為了截圖）
wdg <- MapperPlotter(
Mapper,
circle_data$circle,
circle_data,
type = "forceNetwork"
)
png_file <- file.path(out_dir, sprintf("mapper_%s_w%.2f_ov%02d.png", cover_type, w, ov))
save_mapper_png(wdg, png_file, vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
cat("   saved:", png_file, " | elapsed:", round(time_taken["elapsed"], 2), "sec\n")
gc()
}
}
noisy_inner_circle <- make_noisy_circle(radius = 1, num_points = 10000)
noisy_outer_circle <- make_noisy_circle(radius = 2, num_points = 10000)
circle_data <- rbind(
data.frame(circle = "inner", noisy_inner_circle),
data.frame(circle = "outer",noisy_outer_circle)
)
cover_type  <- "stride"
width_vec <- c(0.5, 1.0, 1.5)
overlap_vec <- c(10, 20, 30, 40)
num_cores <- 12
out_dir <- "mapper_grid_outputs"
dir.create(out_dir, showWarnings = FALSE)
summary_df <- data.frame(
cover_type = character(),
interval_width = numeric(),
percent_overlap = numeric(),
num_vertices = integer(),
num_edges = integer(),
runtime_sec = numeric(),
file_html = character(),
stringsAsFactors = FALSE
)
library(htmlwidgets)
save_mapper_png <- function(widget, png_path, vwidth = 1200, vheight = 900, zoom = 2, delay = 0.5) {
tmp_html <- tempfile(fileext = ".html")
on.exit(try(unlink(tmp_html), silent = TRUE), add = TRUE)
htmlwidgets::saveWidget(widget, tmp_html, selfcontained = TRUE)
webshot2::webshot(tmp_html, file = png_path, vwidth = vwidth, vheight = vheight, zoom = zoom, delay = delay)
}
for (w in width_vec) {
for (ov in overlap_vec) {
cat(sprintf("Cover=%s, Width=%.2f, Overlap=%d%% ...\n", cover_type, w, ov))
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values   = circle_data[, c("x", "y")],
percent_overlap = ov,
methods         = "dbscan",
method_params   = list(eps = 0.3, minPts = 1),
cover_type = cover_type,
interval_width = w,
num_cores = num_cores
)
})
wdg <- MapperPlotter(
Mapper,
circle_data$circle,
circle_data,
type = "forceNetwork"
)
png_file <- file.path(out_dir, sprintf("mapper_%s_w%.2f_ov%02d.png", cover_type, w, ov))
save_mapper_png(wdg, png_file, vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
cat("   saved:", png_file, " | elapsed:", round(time_taken["elapsed"], 2), "sec\n")
gc()
}
}
for (w in width_vec) {
for (ov in overlap_vec) {
cat(sprintf("Cover=%s, Width=%.2f, Overlap=%d%% ...\n", cover_type, w, ov))
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values   = circle_data[, c("x", "y")],
percent_overlap = ov,
methods         = "dbscan",
method_params   = list(eps = 0.3, minPts = 1),
cover_type = cover_type,
interval_width = w,
num_cores = num_cores
)
})
wdg <- MapperPlotter(
Mapper,
circle_data$circle,
circle_data,
type = "forceNetwork"
)
png_file <- file.path(out_dir, sprintf("mapper_%s_w%.2f_ov%02d.png", cover_type, w, ov))
save_mapper_png(wdg, png_file, vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
cat("Saved:", png_file, ", Duration:", round(time_taken["Duration"], 2), "sec\n")
gc()
}
}
for (w in width_vec) {
for (ov in overlap_vec) {
cat(sprintf("Cover=%s, Width=%.2f, Overlap=%d%%\n", cover_type, w, ov))
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values   = circle_data[, c("x", "y")],
percent_overlap = ov,
methods         = "dbscan",
method_params   = list(eps = 0.3, minPts = 1),
cover_type = cover_type,
interval_width = w,
num_cores = num_cores
)
})
wdg <- MapperPlotter(
Mapper,
circle_data$circle,
circle_data,
type = "forceNetwork"
)
save_mapper_png(wdg, png_file, vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
cat("Saved:", png_file, ", Duration:", round(time_taken["Duration"], 2), "sec\n")
gc()
}
}
time_taken
for (w in width_vec) {
for (ov in overlap_vec) {
cat(sprintf("Cover=%s, Width=%.2f, Overlap=%d%%\n", cover_type, w, ov))
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values   = circle_data[, c("x", "y")],
percent_overlap = ov,
methods         = "dbscan",
method_params   = list(eps = 0.3, minPts = 1),
cover_type = cover_type,
interval_width = w,
num_cores = num_cores
)
})
wdg <- MapperPlotter(
Mapper,
circle_data$circle,
circle_data,
type = "forceNetwork"
)
save_mapper_png(wdg, png_file, vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
cat("Saved:", png_file, ", Elapsed:", round(time_taken["elapsed"], 2), "sec\n")
gc()
}
}
for (w in width_vec) {
for (ov in overlap_vec) {
cat(sprintf("Cover=%s, Width=%.2f, Overlap=%d%%\n", cover_type, w, ov))
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values   = circle_data[, c("x", "y")],
percent_overlap = ov,
methods         = "dbscan",
method_params   = list(eps = 0.3, minPts = 1),
cover_type = cover_type,
interval_width = w,
num_cores = num_cores
)
})
wdg <- MapperPlotter(
Mapper,
circle_data$circle,
circle_data,
type = "forceNetwork"
)
save_mapper_png(wdg, png_file, vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
cat("Saved:", png_file, ", Elapsed:", time_taken["elapsed"], "sec\n")
gc()
}
}
filter_values
circle_data[,2:3]
circle_data$circle
GridSearch
GridSearch <- function(
filter_values,
label,
cover_type  <- "stride",
GridSearch <- function(
filter_values,
label,
cover_type = "stride",
width_vec = c(0.5, 1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "mapper_grid_outputs"
) {
dir.create(out_dir, showWarnings = FALSE)
for (w in width_vec) {
for (ov in overlap_vec) {
cat(sprintf("Cover=%s, Width=%.2f, Overlap=%d%%\n", cover_type, w, ov))
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_values,
percent_overlap = ov,
methods  = "dbscan",
method_params = list(eps = 0.3, minPts = 1),
cover_type = cover_type,
interval_width = w,
num_cores = num_cores
)
})
wdg <- MapperPlotter(
Mapper,
label,
filter_values,
type = "forceNetwork"
)
save_mapper_png(wdg, png_file, vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
cat("Saved:", png_file, ", Elapsed:", time_taken["elapsed"], "sec\n")
gc()
}
}
}
GridSearch(
filter_values = circle_data[,2:3],
circle_data$circle
)
source('R/GridSearch.R')
GridSearch(
filter_values = circle_data[,2:3],
circle_data$circle,
num_cores <- 12,
out_dir <- "mapper_grid_outputs"
)
source('R/GridSearch.R')
GridSearch(
filter_values = circle_data[,2:3],
circle_data$circle,
num_cores <- 12,
out_dir <- "mapper_grid_outputs"
)
GridSearch(
filter_values = circle_data[,2:3],
circle_data$circle,
num_cores <- 12,
out_dir <- "mapper_grid_outputs",
width_vec = c(0.5, 1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
)
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
source('R/EdgeVertices.R')
source('R/ConvertLevelsets.R')
source('R/Cover.R')
source('R/Cluster.R')
source('R/SimplicialComplex.R')
source('R/MapperAlgo.R')
source('R/Plotter.R')
source('R/GridSearch.R')
# Toy dataset testing
make_noisy_circle <- function(radius, num_points, noise_sd = 0.1) {
theta <- runif(num_points, 0, 2 * pi)
x <- radius * cos(theta) + rnorm(num_points, sd = noise_sd)
y <- radius * sin(theta) + rnorm(num_points, sd = noise_sd)
data.frame(x = x, y = y)
}
noisy_inner_circle <- make_noisy_circle(radius = 1, num_points = 10000)
noisy_outer_circle <- make_noisy_circle(radius = 2, num_points = 10000)
circle_data <- rbind(
data.frame(circle = "inner", noisy_inner_circle),
data.frame(circle = "outer",noisy_outer_circle)
)
GridSearch(
filter_values = circle_data[,2:3],
circle_data$circle,
num_cores <- 12,
out_dir <- "mapper_grid_outputs",
width_vec = c(0.5, 1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
)
GridSearch(
filter_values = circle_data[,2:3],
circle_data$circle,
num_cores <- 12,
cover_type = "stride",
out_dir <- "mapper_grid_outputs",
width_vec = c(0.5, 1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
)
GridSearch(
filter_values = circle_data[,2:3],
label = circle_data$circle,
num_cores <- 12,
cover_type = "stride",
out_dir <- "mapper_grid_outputs",
width_vec = c(0.5, 1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
)
GridSearch(
filter_values = circle_data[,2:3],
label = circle_data$circle,
num_cores <- 12,
cover_type = "stride",
out_dir = "mapper_grid_outputs",
width_vec = c(0.5, 1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
)
GridSearch(
filter_values = circle_data[,2:3],
label = circle_data$circle,
cover_type = "stride",
width_vec = c(0.5, 1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "mapper_grid_outputs"
)
source('R/GridSearch.R')
GridSearch(
filter_values = circle_data[,2:3],
label = circle_data$circle,
cover_type = "stride",
width_vec = c(0.5, 1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "mapper_grid_outputs"
)
MapperPlotter(Mapper, circle_data$circle, circle_data, type = "forceNetwork")
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
source('R/EdgeVertices.R')
source('R/ConvertLevelsets.R')
source('R/Cover.R')
source('R/Cluster.R')
source('R/SimplicialComplex.R')
source('R/MapperAlgo.R')
source('R/Plotter.R')
source('R/GridSearch.R')
# Toy dataset testing
make_noisy_circle <- function(radius, num_points, noise_sd = 0.1) {
theta <- runif(num_points, 0, 2 * pi)
x <- radius * cos(theta) + rnorm(num_points, sd = noise_sd)
y <- radius * sin(theta) + rnorm(num_points, sd = noise_sd)
data.frame(x = x, y = y)
}
noisy_inner_circle <- make_noisy_circle(radius = 1, num_points = 10000)
noisy_outer_circle <- make_noisy_circle(radius = 2, num_points = 10000)
circle_data <- rbind(
data.frame(circle = "inner", noisy_inner_circle),
data.frame(circle = "outer",noisy_outer_circle)
)
ggplot(circle_data)+geom_point(aes(x = x, y = y, color = circle))
time_taken <- system.time({
Mapper <- MapperAlgo(
# filter_values = iris[,1:4],
filter_values = circle_data[,2:3],
percent_overlap = 20,
methods = "dbscan",
method_params = list(eps = 0.3, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
time_taken
MapperPlotter(Mapper, circle_data$circle, circle_data, type = "forceNetwork")
noisy_inner_circle <- make_noisy_circle(radius = 1, num_points = 1000)
noisy_outer_circle <- make_noisy_circle(radius = 2, num_points = 1000)
circle_data <- rbind(
data.frame(circle = "inner", noisy_inner_circle),
data.frame(circle = "outer",noisy_outer_circle)
)
ggplot(circle_data)+geom_point(aes(x = x, y = y, color = circle))
time_taken <- system.time({
Mapper <- MapperAlgo(
# filter_values = iris[,1:4],
filter_values = circle_data[,2:3],
percent_overlap = 20,
methods = "dbscan",
method_params = list(eps = 0.3, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
time_taken
MapperPlotter(Mapper, circle_data$circle, circle_data, type = "forceNetwork")
MapperPlotter(Mapper, circle_data$circle, circle_data, type = "forceNetwork", avg = TRUE)
MapperPlotter(Mapper, circle_data$x, circle_data, type = "forceNetwork", avg = TRUE)
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::submit_cran()
library(keras)
install.packages('keras')
library(keras)
mnist <- dataset_mnist()
mnist
library(keras)
mnist <- dataset_mnist()
install_keras()
library(keras)
mnist <- dataset_mnist()
library(OpenML)
mnist <- getOMLDataSet(data.id = 554)
install.packages("OpenML")
library(OpenML)
digits <- getOMLDataSet(data.id = 41081)
