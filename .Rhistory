label = data_y$Species,
column = "Species",
cover_type = "stride",
width_vec = c(1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
use_embedding = cpe_params,
)
data_y$Species
GridSearch(
filter_values = data_x[,1:],
data_x[,1:5]
data_x$PW_group <- ifelse(data_x$Sepal.Width > 1.5, "wide", "narrow")
data_x
data_x$PW_group <- ifelse(data_x$Sepal.Width > 1.5, "wide", "narrow")
data_x
data$PW_group <- ifelse(data$Sepal.Width > 1.5, "wide", "narrow")
data
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
use_embedding = cpe_params,
)
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params,
)
source('R/GridSearch.R')
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params,
)
data%>%select(PW_group, Species)
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params,
)
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
data
data$PW_group <- ifelse(data$Sepal.Width > 1.5, "wide", "narrow")
embedded <- CPEmbedding(Mapper, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1.0, 1.5),
overlap_vec = c(10, 20),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1.0),
overlap_vec = c(10),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
source('R/GridSearch.R')
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1.0),
overlap_vec = c(10),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
source('R/GridSearch.R')
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1.0),
overlap_vec = c(10),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
source('R/GridSearch.R')
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1.0),
overlap_vec = c(10),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
source('R/GridSearch.R')
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1.0),
overlap_vec = c(10),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
source('R/GridSearch.R')
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1.0),
overlap_vec = c(10),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/GridSearch.R')
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
source('R/GridSearch.R')
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
source('R/GridSearch.R')
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
data
source('R/GridSearch.R')
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
source('R/GridSearch.R')
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
# MapperPlotter(Mapper, label=data$Species, data=data, type="forceNetwork", avg=FALSE)
data
data%>%select(Species, PW_group)
GridSearch(
filter_values = data[,1:4],
label = data%>%select(Species, PW_group),
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
GridSearch(
filter_values = data[,1:4],
label = data%>%select(PW_group, Species),
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
data
labels <- data%>%select(PW_group, Species)
GridSearch(
filter_values = data[,1:4],
label = labels,
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
data%>%select([,1:4])
data%>%select(1:4,)
data%>%select(1:4,6,5)
MapperPlotter(Mapper, label=embedded, data=data%>%select(1:4,6,5), type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/GridSearch.R')
GridSearch(
filter_values = data[,1:4],
label = labels,
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
q <- GridSearch(
filter_values = data[,1:4],
label = labels,
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
CPEmbedding(Mapper, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
CPEmbedding(q, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
q
source('R/GridSearch.R')
q <- GridSearch(
filter_values = data[,1:4],
label = labels,
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
CPEmbedding(q, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
embedded <- CPEmbedding(q, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
embedded
data
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
MapperPlotter(q, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
wdg <- MapperPlotter(q, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
png_file <- file.path(out_dir, sprintf("mapper_%s_w%.2f_ov%02d.png", cover_type, w, ov))
png_file <- file.path('./', sprintf("mapper_%s_w%.2f_ov%02d.png", cover_type, w, ov))
save_mapper_png(wdg, './', vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
wdg
save_mapper_png(wdg, './mapper_%s_w%.2f_ov%02d.png', vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
data("iris")
force(iris)
source('R/MapperCorrelation.R')
MapperCorrelation(Mapper, data = circle_data, labels = list(circle_data$x, circle_data$y))
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
source('R/EdgeVertices.R')
source('R/ConvertLevelsets.R')
source('R/Cover.R')
source('R/Cluster.R')
source('R/SimplicialComplex.R')
source('R/MapperAlgo.R')
data("iris")
data <- iris
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = data[,1:4],
# filter_values = circle_data[,2:3],
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 1, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
source('R/GridSearch.R')
source('R/MapperCorrelation.R')
MapperCorrelation(Mapper, data = circle_data, labels = list(circle_data$x, circle_data$y))
source('R/Plotter.R')
MapperCorrelation(Mapper, data = circle_data, labels = list(circle_data$x, circle_data$y))
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
print(graph1)
MapperCorrelation <- function(
Mapper, data, labels = list(),
avg = list(FALSE, FALSE), use_embedding = list(FALSE, FALSE)
) {
graph1 <- MapperPlotter(Mapper, label=labels[[1]], data=data, type="ggraph", avg=avg[[1]], use_embedding=use_embedding[[1]])
graph2 <- MapperPlotter(Mapper, label=labels[[2]], data=data, type="ggraph", avg=avg[[2]], use_embedding=use_embedding[[2]])
print(graph1)
x <- graph1$data$AvgLabel
y <- graph2$data$AvgLabel
cc <- cor(x, y, method = "pearson", use = "complete.obs")
df <- data.frame(x=x, y=y)
# plot
ggplot(data = df, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "#58ad90") +
labs(
title = paste("Correlation between two Mapper", round(cc, 3)),
x = "Avg label 1",
y = "Avg label 2"
) +
theme_minimal()
return(df)
}
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
MapperCorrelation <- function(
Mapper, data, labels = list(),
avg = list(FALSE, FALSE), use_embedding = list(FALSE, FALSE)
) {
graph1 <- MapperPlotter(Mapper, label=labels[[1]], data=data, type="ggraph", avg=avg[[1]], use_embedding=use_embedding[[1]])
graph2 <- MapperPlotter(Mapper, label=labels[[2]], data=data, type="ggraph", avg=avg[[2]], use_embedding=use_embedding[[2]])
print(graph1$data)
x <- graph1$data$AvgLabel
y <- graph2$data$AvgLabel
cc <- cor(x, y, method = "pearson", use = "complete.obs")
df <- data.frame(x=x, y=y)
# plot
ggplot(data = df, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "#58ad90") +
labs(
title = paste("Correlation between two Mapper", round(cc, 3)),
x = "Avg label 1",
y = "Avg label 2"
) +
theme_minimal()
return(df)
}
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
MapperCorrelation <- function(
Mapper, data, labels = list(),
avg = list(FALSE, FALSE), use_embedding = list(FALSE, FALSE)
) {
graph1 <- MapperPlotter(Mapper, label=labels[[1]], data=data, type="ggraph", avg=TRUE, use_embedding=use_embedding[[1]])
graph2 <- MapperPlotter(Mapper, label=labels[[2]], data=data, type="ggraph", avg=TRUE, use_embedding=use_embedding[[2]])
print(graph1$data)
x <- graph1$data$AvgLabel
y <- graph2$data$AvgLabel
cc <- cor(x, y, method = "pearson", use = "complete.obs")
df <- data.frame(x=x, y=y)
# plot
ggplot(data = df, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "#58ad90") +
labs(
title = paste("Correlation between two Mapper", round(cc, 3)),
x = "Avg label 1",
y = "Avg label 2"
) +
theme_minimal()
return(df)
}
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
MapperCorrelation <- function(
Mapper, data, labels = list(),
avg = list(FALSE, FALSE), use_embedding = list(FALSE, FALSE)
) {
graph1 <- MapperPlotter(Mapper, label=labels[[1]], data=data, type="ggraph", avg=TRUE, use_embedding=use_embedding[[1]])
graph2 <- MapperPlotter(Mapper, label=labels[[2]], data=data, type="ggraph", avg=TRUE, use_embedding=use_embedding[[2]])
print(graph1$data)
x <- graph1$data$AvgLabel
y <- graph2$data$AvgLabel
cc <- cor(x, y, method = "pearson", use = "complete.obs")
df <- data.frame(x=x, y=y)
# plot
plt <- ggplot(data = df, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "#58ad90") +
labs(
title = paste("Correlation between two Mapper", round(cc, 3)),
x = "Avg label 1",
y = "Avg label 2"
) +
theme_minimal()
return(plt)
}
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
source('R/MapperCorrelation.R')
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
MapperPlotter(Mapper, label=data$Species, data=data, type="forceNetwork", avg=FALSE, use_embedding=FALSE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=data$Species, data=data, type="forceNetwork", avg=FALSE, use_embedding=FALSE)
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
embedded <- CPEmbedding(Mapper, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
source('R/CPEmbedding.R')
data$PW_group <- ifelse(data$Sepal.Width > 1.5, "wide", "narrow")
embedded <- CPEmbedding(Mapper, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
embedded
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
