node_rows <- data[nodes_to_origin$original_indexes[[i]], ]
print(node_rows)
avg <- mean(node_rows[,colname])
print(avg)
}
}
avg_label(iris, 'Sepal.Length', df_for_search)
(6.9+6.9+6.8+7.2+6.9)/5
avg_label <- function(
data, colname, nodes_to_origin
) {
rows <- mapper_data$x$nodes%>%nrow()
for(i in 1:rows) {
node_rows <- data[nodes_to_origin$original_indexes[[i]], ]
print(node_rows)
avg <- mean(node_rows[,colname])
nodes_to_origin$avg_label[i] <- avg
}
}
avg_label(iris, 'Sepal.Length', df_for_search)
df_for_search
new_df_for_search <- avg_label(iris, 'Sepal.Length', df_for_search)
avg_label <- function(
data, colname, nodes_to_origin
) {
rows <- mapper_data$x$nodes%>%nrow()
for(i in 1:rows) {
node_rows <- data[nodes_to_origin$original_indexes[[i]], ]
avg <- mean(node_rows[,colname])
nodes_to_origin$avg_label[i] <- avg
}
return(nodes_to_origin)
}
new_df_for_search <- avg_label(iris, 'Sepal.Length', df_for_search)
View(new_df_for_search)
new_df_for_search <- avg_label(iris, 'Sepal.Length', df_for_search)
MapperPlotter(Mapper, label = new_df_for_search$avg_label, data = circle_data, type = "forceNetwork", avg = FALSE)
MapperPlotter(Mapper, label = new_df_for_search$avg_label, data = circle_data, type = "forceNetwork", avg = True)
MapperPlotter(Mapper, label = new_df_for_search$avg_label, data = circle_data, type = "forceNetwork", avg = TRUE)
Mapper$x$nodes$name[1]
MapperPlotter(Mapper, label = new_df_for_search$avg_label, data = circle_data, type = "ggraph", avg = FALSE)
Mapper$x$nodes$name[1]
mg
mg <- MapperPlotter(Mapper, label = new_df_for_search$avg_label, data = circle_data, type = "ggraph", avg = FALSE)
mg
mg$x$nodes$name[1]
mg$data$x$nodes$name[1]
mg$data
new_df_for_search$avg_label
mg <- MapperPlotter(Mapper, label = new_df_for_search$avg_label, data = circle_data, type = "ggraph", avg = TRUE)
mg$data
new_df_for_search$avg_label
mg <- MapperPlotter(Mapper, label = iris$Sepal.Length, data = iris, type = "ggraph", avg = TRUE)
mg$data
rows <- mapper_data$x$nodes%>%nrow()
df_for_search <- data.frame(node = integer(0), original_indexes = I(list()))
for(i in 1:rows) {
original_row_lst <- as.numeric(unlist(strsplit(
strsplit(mapper_data$x$nodes$name[i], ": ")[[1]][2], ", ")
))
df_for_search <- rbind(
df_for_search,
data.frame(
node = i,
original_indexes = I(list(original_row_lst))
))
}
iris[df_for_search$original_indexes[[1]], ]
avg_label <- function(
data, colname, nodes_to_origin
) {
rows <- mapper_data$x$nodes%>%nrow()
for(i in 1:rows) {
node_rows <- data[nodes_to_origin$original_indexes[[i]], ]
avg <- mean(node_rows[,colname])
nodes_to_origin$avg_label[i] <- avg
}
return(nodes_to_origin)
}
new_df_for_search <- avg_label(iris, 'Sepal.Length', df_for_search)
new_df_for_search
mg$data
mg <- MapperPlotter(Mapper, label = iris$Sepal.Length, data = iris, type = "ggraph", avg = TRUE)
mg$data
avg_label <- function(
data, colname, nodes_to_origin
) {
rows <- mapper_data$x$nodes%>%nrow()
for(i in 1:rows) {
node_rows <- data[nodes_to_origin$original_indexes[[i]], ]
avg <- mean(node_rows[,colname])
nodes_to_origin$avg_label[i] <- avg
}
return(nodes_to_origin)
}
new_df_for_search <- avg_label(iris, 'Sepal.Length', df_for_search)
new_df_for_search
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = iris[,1:4],
# filter_values = circle_data[,2:3],
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 1, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
rows <- mapper_data$x$nodes%>%nrow()
mapper_data
rows <- Mapper$x$nodes%>%nrow()
df_for_search <- data.frame(node = integer(0), original_indexes = I(list()))
for(i in 1:rows) {
original_row_lst <- as.numeric(unlist(strsplit(
strsplit(mapper_data$x$nodes$name[i], ": ")[[1]][2], ", ")
))
df_for_search <- rbind(
df_for_search,
data.frame(
node = i,
original_indexes = I(list(original_row_lst))
))
}
rows <- Mapper$x$nodes%>%nrow()
df_for_search <- data.frame(node = integer(0), original_indexes = I(list()))
for(i in 1:rows) {
original_row_lst <- as.numeric(unlist(strsplit(
strsplit(Mapper$x$nodes$name[i], ": ")[[1]][2], ", ")
))
df_for_search <- rbind(
df_for_search,
data.frame(
node = i,
original_indexes = I(list(original_row_lst))
))
}
rows <- Mapper$x$nodes%>%nrow()
df_for_search <- data.frame(node = integer(0), original_indexes = I(list()))
for(i in 1:rows) {
original_row_lst <- as.numeric(unlist(strsplit(
strsplit(Mapper$x$nodes$name[i], ": ")[[1]][2], ", ")
))
df_for_search <- rbind(
df_for_search,
data.frame(
node = i,
original_indexes = I(list(original_row_lst))
))
}
Mapper$x$nodes
Mapper$points_in_level_set
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = iris[,1:4],
# filter_values = circle_data[,2:3],
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 1, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
Mapper
Mapper
Mapper$level_of_vertex
rows <- Mapper$level_of_vertex%>%nrow()
rows
Mapper$level_of_vertex
rows <- Mapper$level_of_vertex%>%length()
rows
Mapper$points_in_vertex
rows <- Mapper$level_of_vertex%>%length()
df_for_search <- data.frame(node = integer(0), original_indexes = I(list()))
for(i in 1:rows) {
original_row_lst <- Mapper$points_in_vertex[[i]]
df_for_search <- rbind(
df_for_search,
data.frame(
node = i,
original_indexes = I(list(original_row_lst))
))
}
View(df_for_search)
avg_label <- function(
data, colname, nodes_to_origin
) {
rows <- Mapper$x$nodes%>%nrow()
for(i in 1:rows) {
node_rows <- data[nodes_to_origin$original_indexes[[i]], ]
avg <- mean(node_rows[,colname])
nodes_to_origin$avg_label[i] <- avg
}
return(nodes_to_origin)
}
avg_label <- function(
data, colname, nodes_to_origin
) {
rows <- Mapper$level_of_vertex%>%length()
for(i in 1:rows) {
node_rows <- data[nodes_to_origin$original_indexes[[i]], ]
avg <- mean(node_rows[,colname])
nodes_to_origin$avg_label[i] <- avg
}
return(nodes_to_origin)
}
new_df_for_search <- avg_label(iris, 'Sepal.Length', df_for_search)
new_df_for_search
mg <- MapperPlotter(Mapper, label = iris$Sepal.Length, data = iris, type = "ggraph", avg = TRUE)
mg$data
mg <- MapperPlotter(Mapper, label = iris$Sepal.Length, data = iris, type = "ggraph", avg = TRUE)
mg$data
mg
rows <- length(Mapper$level_of_vertex)
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(tidyverse)
source('~/Desktop/TDA-R/MapperAlgo/R/EdgeVertices.R')
source('~/Desktop/TDA-R/MapperAlgo/R/ConvertLevelsets.R')
source('~/Desktop/TDA-R/MapperAlgo/R/Cover.R')
source('~/Desktop/TDA-R/MapperAlgo/R/Cluster.R')
source('~/Desktop/TDA-R/MapperAlgo/R/SimplicialComplex.R')
source('~/Desktop/TDA-R/MapperAlgo/R/MapperAlgo.R')
source('~/Desktop/TDA-R/MapperAlgo/R/Plotter.R')
source('~/Desktop/TDA-R/MapperAlgo/R/GridSearch.R')
filter_full = read_csv("./ComputedData/ForModel/filtered_data.csv") %>% select(-c(pc4, pc5))
filter_full = read_csv("~/Desktop/ST-RTA/ComputedData/ForModel/filtered_data.csv") %>% select(-c(pc4, pc5))
filter_full
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_full,
percent_overlap = 30,
# methods = "dbscan",
# method_params = list(eps = 0.3, minPts = 3),
methods = "hierarchical",
method_params = list(num_bins_when_clustering = 2, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 3),
# methods = "pam",
# method_params = list(num_clusters = 5),
cover_type = 'stride',
# intervals = 10,
interval_width = 1.5,
num_cores = 10
)
})
filter_full
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_full,
percent_overlap = 30,
# methods = "dbscan",
# method_params = list(eps = 0.3, minPts = 3),
methods = "hierarchical",
method_params = list(num_bins_when_clustering = 2, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 3),
# methods = "pam",
# method_params = list(num_clusters = 5),
cover_type = 'stride',
# intervals = 10,
interval_width = 1,
num_cores = 10
)
})
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_full,
percent_overlap = 10,
# methods = "dbscan",
# method_params = list(eps = 0.3, minPts = 3),
methods = "hierarchical",
method_params = list(num_bins_when_clustering = 2, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 3),
# methods = "pam",
# method_params = list(num_clusters = 5),
cover_type = 'stride',
# intervals = 10,
interval_width = 1,
num_cores = 10
)
})
mem.maxVSize()
lobstr::mem_used()
gc()
gc()
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_full,
percent_overlap = 10,
# methods = "dbscan",
# method_params = list(eps = 0.3, minPts = 3),
methods = "hierarchical",
method_params = list(num_bins_when_clustering = 2, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 3),
# methods = "pam",
# method_params = list(num_clusters = 5),
cover_type = 'stride',
# intervals = 10,
interval_width = 1,
num_cores = 10
)
})
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(tidyverse)
source('~/Desktop/TDA-R/MapperAlgo/R/EdgeVertices.R')
source('~/Desktop/TDA-R/MapperAlgo/R/ConvertLevelsets.R')
source('~/Desktop/TDA-R/MapperAlgo/R/Cover.R')
source('~/Desktop/TDA-R/MapperAlgo/R/Cluster.R')
source('~/Desktop/TDA-R/MapperAlgo/R/SimplicialComplex.R')
source('~/Desktop/TDA-R/MapperAlgo/R/MapperAlgo.R')
source('~/Desktop/TDA-R/MapperAlgo/R/Plotter.R')
source('~/Desktop/TDA-R/MapperAlgo/R/GridSearch.R')
filter_full = read_csv("~/Desktop/ST-RTA/ComputedData/ForModel/filtered_data.csv") #%>% select(-c(pc4, pc5))
filter_full
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_full,
percent_overlap = 10,
# methods = "dbscan",
# method_params = list(eps = 0.3, minPts = 3),
methods = "hierarchical",
method_params = list(num_bins_when_clustering = 2, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 3),
# methods = "pam",
# method_params = list(num_clusters = 5),
cover_type = 'stride',
# intervals = 10,
interval_width = 1,
num_cores = 10
)
})
gc()
filter_full <- read_csv("~/Desktop/ST-RTA/ComputedData/ForModel/filtered_data.csv")%>%
head(1000)
filter_full
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_full,
percent_overlap = 10,
# methods = "dbscan",
# method_params = list(eps = 0.3, minPts = 3),
methods = "hierarchical",
method_params = list(num_bins_when_clustering = 2, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 3),
# methods = "pam",
# method_params = list(num_clusters = 5),
cover_type = 'stride',
# intervals = 10,
interval_width = 1,
num_cores = 10
)
})
MapperPlotter(Mapper, filter_full$centrality, filter_full, type="forceNetwork", avg=TRUE)
filter_full <- read_csv("~/Desktop/ST-RTA/ComputedData/ForModel/filtered_data.csv")%>%
head(10000)
filter_full
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_full,
percent_overlap = 10,
# methods = "dbscan",
# method_params = list(eps = 0.3, minPts = 3),
methods = "hierarchical",
method_params = list(num_bins_when_clustering = 2, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 3),
# methods = "pam",
# method_params = list(num_clusters = 5),
cover_type = 'stride',
# intervals = 10,
interval_width = 1,
num_cores = 10
)
})
MapperPlotter(Mapper, filter_full$centrality, filter_full, type="forceNetwork", avg=TRUE)
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_full,
percent_overlap = 30,
# methods = "dbscan",
# method_params = list(eps = 0.3, minPts = 3),
methods = "hierarchical",
method_params = list(num_bins_when_clustering = 2, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 3),
# methods = "pam",
# method_params = list(num_clusters = 5),
cover_type = 'stride',
# intervals = 10,
interval_width = 1,
num_cores = 10
)
})
gc()
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_full,
percent_overlap = 30,
# methods = "dbscan",
# method_params = list(eps = 0.3, minPts = 3),
methods = "hierarchical",
method_params = list(num_bins_when_clustering = 2, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 3),
# methods = "pam",
# method_params = list(num_clusters = 5),
cover_type = 'stride',
# intervals = 10,
interval_width = 1,
num_cores = 10
)
})
gc()
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(tidyverse)
source('~/Desktop/TDA-R/MapperAlgo/R/EdgeVertices.R')
source('~/Desktop/TDA-R/MapperAlgo/R/ConvertLevelsets.R')
source('~/Desktop/TDA-R/MapperAlgo/R/Cover.R')
source('~/Desktop/TDA-R/MapperAlgo/R/Cluster.R')
source('~/Desktop/TDA-R/MapperAlgo/R/SimplicialComplex.R')
source('~/Desktop/TDA-R/MapperAlgo/R/MapperAlgo.R')
source('~/Desktop/TDA-R/MapperAlgo/R/Plotter.R')
source('~/Desktop/TDA-R/MapperAlgo/R/GridSearch.R')
filter_full <- read_csv("~/Desktop/ST-RTA/ComputedData/ForModel/filtered_data.csv")%>%
head(10000)
filter_full
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_full,
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 0.3, minPts = 3),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 2, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 3),
# methods = "pam",
# method_params = list(num_clusters = 5),
cover_type = 'stride',
# intervals = 10,
interval_width = 1,
num_cores = 10
)
})
MapperPlotter(Mapper, filter_full$centrality, filter_full, type="forceNetwork", avg=TRUE)
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
source('R/EdgeVertices.R')
source('R/ConvertLevelsets.R')
source('R/Cover.R')
source('R/Cluster.R')
source('R/SimplicialComplex.R')
source('R/MapperAlgo.R')
data("iris")
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = iris[,1:4],
# filter_values = circle_data[,2:3],
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 1, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
iris
