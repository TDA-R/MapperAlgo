roxygen2::roxygenise()
roxygen2::roxygenise()
vignette("rd")
vignette("rd-other")
install.packages("roxygen2")
pak::pak("r-lib/roxygen2")
numeric(4)
RStudio.Version()
version
install.packages("testthat")
usethis::use_testthat()
usethis::use_test("MapperAlgo")
devtools::test()
install.packages("fastcluster")
install.packages("fastcluster")
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::install()
devtools::check()
devtools::document()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
rm(list = ls())
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::clean_vignettes()
devtools::document()
devtools::document()
devtools::document()
library(tidyverse)
# library(TDA)
library(networkD3)
library(igraph)
library(ks)
setwd('./Mapper_from_scratch')
source('MappingAlgo.R')
setwd('./MapperAlgo')
library(ks)
source('EdgeVertices.R')
source('MappingAlgo.R')
library(tidyverse)
# library(TDA)
library(networkD3)
library(igraph)
library(ks)
source('EdgeVertices.R')
source('MappingAlgo.R')
source('MapperAlgo.R')
data("iris")
time_taken <- system.time({
Traffic.mapper <- mapper(
filter_values = iris[,1:4],
intervals = 4,
percent_overlap = 50,
num_bins_when_clustering = 30)
})
devtools::document()
devtools::document()
devtools::document()
rm(list = c("cluster_cutoff_at_first_empty_bin", "cover_points", "lsfi_from_lsmi", "lsmi_from_lsfi", "mapperEdges",
"mapperVertices", "perform_clustering"))
devtools::document()
source('R/EdgeVertices.R')
source('MapperAlgo.R')
source('R/MapperAlgo.R')
data("iris")
time_taken <- system.time({
Traffic.mapper <- MapperAlgo(
filter_values = iris[,1:4],
intervals = 4,
percent_overlap = 50,
num_bins_when_clustering = 30)
})
devtools::document()
rm(list = c("cluster_cutoff_at_first_empty_bin", "cover_points", "lsfi_from_lsmi", "lsmi_from_lsfi", "MapperAlgo",
"mapperEdges", "mapperVertices", "perform_clustering"))
library(tidyverse)
source('R/EdgeVertices.R')
source('R/MapperAlgo.R')
data("iris")
time_taken <- system.time({
Traffic.mapper <- MapperAlgo(
filter_values = iris[,1:4],
intervals = 4,
percent_overlap = 50,
num_bins_when_clustering = 30)
})
time_taken
Traffic.graph <- graph.adjacency(Traffic.mapper$adjacency, mode="undirected")
l = length(V(Traffic.graph))
library(igraph)
Traffic.graph <- graph.adjacency(Traffic.mapper$adjacency, mode="undirected")
l = length(V(Traffic.graph))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Distribution of specific variable in each vertex Majority vote
var.maj.vertex <- c()
filter.vertex <- c()
for (i in 1:l){
points.in.vertex <- Traffic.mapper$points_in_vertex[[i]]
Mode.in.vertex <- Mode(iris$Species[points.in.vertex])
var.maj.vertex <- c(var.maj.vertex,as.character(Mode.in.vertex))
# filter.vertex <- c(filter.vertex,mean(filter.kde[points.in.vertex]))
}
# Size
vertex.size <- rep(0,l)
for (i in 1:l){
points.in.vertex <- Traffic.mapper$points_in_vertex[[i]]
vertex.size[i] <- length((Traffic.mapper$points_in_vertex[[i]]))
}
MapperNodes <- mapperVertices(Traffic.mapper, 1:nrow(iris))
MapperNodes$var.maj.vertex <- as.factor(var.maj.vertex)
# MapperNodes$filter.kde <- filter.vertex
MapperNodes$Nodesize <- vertex.size
MapperLinks <- mapperEdges(Traffic.mapper)
forceNetwork(Nodes = MapperNodes, Links = MapperLinks, Target = "Linktarget",
Value = "Linkvalue", NodeID = "Nodename", Nodesize = "Nodesize",
Group = "var.maj.vertex", opacity = 1, zoom = TRUE,
linkDistance = 10, charge = -10, legend = TRUE)
# library(TDA)
library(networkD3)
forceNetwork(Nodes = MapperNodes, Links = MapperLinks, Target = "Linktarget",
Value = "Linkvalue", NodeID = "Nodename", Nodesize = "Nodesize",
Group = "var.maj.vertex", opacity = 1, zoom = TRUE,
linkDistance = 10, charge = -10, legend = TRUE)
devtools::document()
rm(list = c("cluster_cutoff_at_first_empty_bin", "cover_points", "lsfi_from_lsmi", "lsmi_from_lsfi", "MapperAlgo",
"mapperEdges", "mapperVertices", "perform_clustering"))
devtools::build()
devtools::check_rhub()
devtools::check_win_devel()
rhub::platforms()
rhub::check(platform = "macos-highsierra-release-cran")
devtools::submit_cran()
use_cran_comments()
install.packages("usethis")
usethis::use_cran_comments()
devtools::submit_cran()
devtools::build()
devtools::submit_cran()
devtools::build()
devtools::build()
devtools::submit_cran()
devtools::build()
devtools::submit_cran()
devtools::build()
devtools::submit_cran()
devtools::build()
devtools::submit_cran()
devtools::build()
devtools::submit_cran()
use_mit_license()
devtools::check_rhub()
devtools::check_win_devel()
devtools::build()
devtools::submit_cran()
devtools::build()
devtools::submit_cran()
devtools::build()
devtools::submit_cran()
devtools::build()
devtools::submit_cran()
devtools::build()
devtools::submit_cran()
