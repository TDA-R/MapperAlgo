wdg <- MapperPlotter(q, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
png_file <- file.path(out_dir, sprintf("mapper_%s_w%.2f_ov%02d.png", cover_type, w, ov))
png_file <- file.path('./', sprintf("mapper_%s_w%.2f_ov%02d.png", cover_type, w, ov))
save_mapper_png(wdg, './', vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
wdg
save_mapper_png(wdg, './mapper_%s_w%.2f_ov%02d.png', vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
data("iris")
force(iris)
source('R/MapperCorrelation.R')
MapperCorrelation(Mapper, data = circle_data, labels = list(circle_data$x, circle_data$y))
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
source('R/EdgeVertices.R')
source('R/ConvertLevelsets.R')
source('R/Cover.R')
source('R/Cluster.R')
source('R/SimplicialComplex.R')
source('R/MapperAlgo.R')
data("iris")
data <- iris
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = data[,1:4],
# filter_values = circle_data[,2:3],
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 1, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
source('R/GridSearch.R')
source('R/MapperCorrelation.R')
MapperCorrelation(Mapper, data = circle_data, labels = list(circle_data$x, circle_data$y))
source('R/Plotter.R')
MapperCorrelation(Mapper, data = circle_data, labels = list(circle_data$x, circle_data$y))
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
print(graph1)
MapperCorrelation <- function(
Mapper, data, labels = list(),
avg = list(FALSE, FALSE), use_embedding = list(FALSE, FALSE)
) {
graph1 <- MapperPlotter(Mapper, label=labels[[1]], data=data, type="ggraph", avg=avg[[1]], use_embedding=use_embedding[[1]])
graph2 <- MapperPlotter(Mapper, label=labels[[2]], data=data, type="ggraph", avg=avg[[2]], use_embedding=use_embedding[[2]])
print(graph1)
x <- graph1$data$AvgLabel
y <- graph2$data$AvgLabel
cc <- cor(x, y, method = "pearson", use = "complete.obs")
df <- data.frame(x=x, y=y)
# plot
ggplot(data = df, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "#58ad90") +
labs(
title = paste("Correlation between two Mapper", round(cc, 3)),
x = "Avg label 1",
y = "Avg label 2"
) +
theme_minimal()
return(df)
}
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
MapperCorrelation <- function(
Mapper, data, labels = list(),
avg = list(FALSE, FALSE), use_embedding = list(FALSE, FALSE)
) {
graph1 <- MapperPlotter(Mapper, label=labels[[1]], data=data, type="ggraph", avg=avg[[1]], use_embedding=use_embedding[[1]])
graph2 <- MapperPlotter(Mapper, label=labels[[2]], data=data, type="ggraph", avg=avg[[2]], use_embedding=use_embedding[[2]])
print(graph1$data)
x <- graph1$data$AvgLabel
y <- graph2$data$AvgLabel
cc <- cor(x, y, method = "pearson", use = "complete.obs")
df <- data.frame(x=x, y=y)
# plot
ggplot(data = df, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "#58ad90") +
labs(
title = paste("Correlation between two Mapper", round(cc, 3)),
x = "Avg label 1",
y = "Avg label 2"
) +
theme_minimal()
return(df)
}
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
MapperCorrelation <- function(
Mapper, data, labels = list(),
avg = list(FALSE, FALSE), use_embedding = list(FALSE, FALSE)
) {
graph1 <- MapperPlotter(Mapper, label=labels[[1]], data=data, type="ggraph", avg=TRUE, use_embedding=use_embedding[[1]])
graph2 <- MapperPlotter(Mapper, label=labels[[2]], data=data, type="ggraph", avg=TRUE, use_embedding=use_embedding[[2]])
print(graph1$data)
x <- graph1$data$AvgLabel
y <- graph2$data$AvgLabel
cc <- cor(x, y, method = "pearson", use = "complete.obs")
df <- data.frame(x=x, y=y)
# plot
ggplot(data = df, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "#58ad90") +
labs(
title = paste("Correlation between two Mapper", round(cc, 3)),
x = "Avg label 1",
y = "Avg label 2"
) +
theme_minimal()
return(df)
}
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
MapperCorrelation <- function(
Mapper, data, labels = list(),
avg = list(FALSE, FALSE), use_embedding = list(FALSE, FALSE)
) {
graph1 <- MapperPlotter(Mapper, label=labels[[1]], data=data, type="ggraph", avg=TRUE, use_embedding=use_embedding[[1]])
graph2 <- MapperPlotter(Mapper, label=labels[[2]], data=data, type="ggraph", avg=TRUE, use_embedding=use_embedding[[2]])
print(graph1$data)
x <- graph1$data$AvgLabel
y <- graph2$data$AvgLabel
cc <- cor(x, y, method = "pearson", use = "complete.obs")
df <- data.frame(x=x, y=y)
# plot
plt <- ggplot(data = df, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "#58ad90") +
labs(
title = paste("Correlation between two Mapper", round(cc, 3)),
x = "Avg label 1",
y = "Avg label 2"
) +
theme_minimal()
return(plt)
}
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
source('R/MapperCorrelation.R')
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
MapperPlotter(Mapper, label=data$Species, data=data, type="forceNetwork", avg=FALSE, use_embedding=FALSE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=data$Species, data=data, type="forceNetwork", avg=FALSE, use_embedding=FALSE)
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
embedded <- CPEmbedding(Mapper, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
source('R/CPEmbedding.R')
data$PW_group <- ifelse(data$Sepal.Width > 1.5, "wide", "narrow")
embedded <- CPEmbedding(Mapper, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
embedded
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
library(knitr)
library(bookdown)
install.packages('bookdown')
library(markdown)
library(knitr)
library(bookdown)
source("~/Desktop/TDA-R/MapperAlgo/Testing.R")
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
render("vignettes/Mapper.Rmd")
library(rmarkdown)
render("vignettes/Mapper.Rmd")
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
source('R/EdgeVertices.R')
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
source('../R/EdgeVertices.R')
source('../R/ConvertLevelsets.R')
source('../R/Cover.R')
source('../R/Cluster.R')
source('../R/SimplicialComplex.R')
source('../R/MapperAlgo.R')
data("iris")
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
source('../R/EdgeVertices.R')
source('../R/ConvertLevelsets.R')
source('../R/Cover.R')
source('../R/Cluster.R')
source('../R/SimplicialComplex.R')
source('../R/MapperAlgo.R')
data("iris")
force(iris)
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
source('../R/EdgeVertices.R')
source('../R/ConvertLevelsets.R')
source('../R/Cover.R')
source('../R/Cluster.R')
source('../R/SimplicialComplex.R')
source('../R/MapperAlgo.R')
data("iris")
summary(cars)
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
source('../R/EdgeVertices.R')
source('../R/ConvertLevelsets.R')
source('../R/Cover.R')
source('../R/Cluster.R')
source('../R/SimplicialComplex.R')
source('../R/MapperAlgo.R')
data("iris")
data <- iris
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = data[,1:4],
# filter_values = circle_data[,2:3],
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 1, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
time_taken
source('R/CPEmbedding.R')
source('../R/CPEmbedding.R')
data$PW_group <- ifelse(data$Sepal.Width > 1.5, "wide", "narrow")
embedded <- CPEmbedding(Mapper, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
embedded
source('../R/Plotter.R')
MapperPlotter(Mapper, label=data$Species, data=data, type="forceNetwork", avg=FALSE, use_embedding=FALSE)
source('../R/CPEmbedding.R')
data$PW_group <- ifelse(data$Sepal.Width > 1.5, "wide", "narrow")
embedded <- CPEmbedding(Mapper, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
source('../R/Plotter.R')
MapperPlotter(Mapper, label=data$Species, data=data, type="forceNetwork", avg=FALSE, use_embedding=FALSE)
source('../R/CPEmbedding.R')
data$PW_group <- ifelse(data$Sepal.Width > 1.5, "wide", "narrow")
embedded <- CPEmbedding(Mapper, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
render("Mapper.Rmd")
render("./vignettes/Mapper.Rmd")
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
source('../R/EdgeVertices.R')
source('../R/ConvertLevelsets.R')
source('../R/Cover.R')
source('../R/Cluster.R')
source('../R/SimplicialComplex.R')
source('../R/MapperAlgo.R')
data("iris")
data <- iris
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = data[,1:4],
# filter_values = circle_data[,2:3],
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 1, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
time_taken
source('../R/Plotter.R')
MapperPlotter(Mapper, label=data$Species, data=data, type="forceNetwork", avg=FALSE, use_embedding=FALSE)
source('../R/CPEmbedding.R')
data$PW_group <- ifelse(data$Sepal.Width > 1.5, "wide", "narrow")
embedded <- CPEmbedding(Mapper, data, columns = list("PW_group", "Species"), a_level = "wide", b_level = "versicolor")
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/MapperCorrelation.R')
source('../R/MapperCorrelation.R')
MapperCorrelation(Mapper, data = data, labels = list(data$Sepal.Length, data$Sepal.Width))
source("~/Desktop/TDA-R/MapperAlgo/Testing.R")
cpe_params <- list("PW_group", "Species", "wide", "versicolor")
data$PW_group <- ifelse(data$Sepal.Width > 1.5, "wide", "narrow")
labels <- data%>%select(PW_group, Species)
GridSearch(
filter_values = data[,1:4],
label = labels,
column = "Species",
cover_type = "stride",
width_vec = c(1),
overlap_vec = c(30),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
avg = TRUE,
use_embedding = cpe_params
)
rmarkdown::run("Maper.Rmd")
rmarkdown::run("Mapper.Rmd")
rmarkdown::run("./vignettes/Mapper.Rmd")
render("Mapper.Rmd", output_file="Mapper.html", output_dir="./vignettes")
render("Mapper.Rmd", output_file="Mapper.html", output_dir="./vignettes")
library(rmarkdown)
render("Mapper.Rmd")
render("./vignettes/Mapper.Rmd")
render("./vignettes/FileExplain.Rmd")
library(bookdown)
render_book("index.Rmd", "bookdown::gitbook")
render_book("./vignettes/index.Rmd", "bookdown::gitbook")
render_book("./vignettes/index.Rmd", "bookdown::gitbook")
render_book("./vignettes/index.Rmd", "bookdown::gitbook")
setwd("vignettes")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='tf3q5u-0-0', token='57CAD8D9E9134D9E2F94DCBADCF12D89', secret='bm+9z48iuUyti/zpOt968uiKfrXKiHS4JBivNl5K')
rsconnect::accounts()
rsconnect::deployApp(appDir = ".",
appName = "document")
library(bookdown)
render_book("index.Rmd", "bookdown::gitbook")
rpubsUpload(title = "My Book", htmlFile = "_book/index.html")
render_book("index.Rmd", "bookdown::gitbook")
render_book("index.Rmd", "bookdown::gitbook")
rpubsUpload(title = "My Book", htmlFile = "_book/index.html")
rpubsUpload(title = "Book", htmlFile = "_book/index.html")
rpubsUpload(title = "Book")
source("~/Desktop/TDA-R/MapperAlgo/Testing.R")
rpubsUpload(title = "My Book", contentFile = "_book/index.html")
rpubsUpload(title = "My Book", contentFile = "../_book/index.html")
setwd("vignettes")
ls
setwd("vignettes")
rpubsUpload(title = "My Book", htmlFile = "./vignettes/_book/index.html")
library(rpubs)
install.packages('rpubs')
library(rpubs)
library(rmarkdown)
library(bookdown)
library(rpubs)
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
library(rpubs)
rpubsUpload(title = "My Book", htmlFile = "_book/index.html")
rpubsUpload(title = "My Book", htmlFile = "../_book/index.html")
rsconnect::accounts()
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("../vignettes/index.Rmd", "bookdown::gitbook")
bookdown::render_book("./vignettes/index.Rmd", "bookdown::gitbook")
setwd("/Users/wangqiqian/Desktop/TDA-R/MapperAlgo/vignettes")
bookdown::render_book("./index.Rmd", "bookdown::gitbook")
bookdown::render_book("./index.Rmd", "bookdown::gitbook")
bookdown::render_book("./index.Rmd", "bookdown::gitbook")
rpubsUpload(title = "My Book", htmlFile = "_book/index.html")
rpubsUpload(title = "My Book", htmlFile = "_book/index.html")
render_book("index.Rmd", "bookdown::gitbook")
rpubs::rpubsUpload(
title = "My Book",
htmlFile = "_book/index.html"
)
rpubsUpload()
rpubsUpload('book')
library(rpubs)
install.packages('rpubs')
publish_book()
publish_book()
bookdown::publish_book(account = "kennywang2003", server = "bookdown.org")
setwd("/Users/wangqiqian/Desktop/TDA-R/MapperAlgo/vignettes")
render_book("index.Rmd", "bookdown::gitbook")
library(rmarkdown)
library(bookdown)
render_book("index.Rmd", "bookdown::gitbook")
render_book("index.Rmd", "bookdown::gitbook")
render_book("index.Rmd", "bookdown::gitbook")
render_book("index.Rmd", "bookdown::gitbook")
bookdown::publish_book(account = "kennywang2003", server = "bookdown.org")
render_book("index.Rmd", "bookdown::gitbook")
tinytex::tlmgr_update()
knitr::include_graphics(../man/figures/Cover.png)
knitr::include_graphics("../man/figures/Cover.png")
knitr::include_graphics("../man/figures/MapperOutput.png")
knitr::include_graphics("../man/figures/stride_extension_old.png")
knitr::include_graphics("../man/figures/stride_extension_old2.png")
knitr::include_graphics("../man/figures/stride_extension_new.png")
knitr::include_graphics("../man/figures/Performance2.png")
knitr::include_graphics("../man/figures/Performance1.png")
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
source('../R/EdgeVertices.R')
source('../R/ConvertLevelsets.R')
source('../R/Cover.R')
source('../R/Cluster.R')
source('../R/SimplicialComplex.R')
source('../R/MapperAlgo.R')
data("iris")
data <- iris
knitr::include_graphics("../man/figures/MNISTMapper.png")
render_book("index.Rmd", "bookdown::gitbook")
bookdown::publish_book(account = "kennywang2003", server = "bookdown.org")
render_book("index.Rmd", "bookdown::gitbook")
bookdown::publish_book(account = "kennywang2003", server = "bookdown.org")
knitr::include_graphics("./man/figures/MapperOutput.png")
knitr::include_graphics("./man/figures/stride_extension_new.png")
render_book("index.Rmd", "bookdown::gitbook")
bookdown::publish_book(account = "kennywang2003", server = "bookdown.org")
bookdown::publish_book(account = "kennywang2003", server = "bookdown.org")
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::submit_cran()
