method_params = list(num_bins_when_clustering = 15, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 5),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 0.4,
num_cores = 12
)
})
embedded <- ColorEmbedding(Mapper, data_with_label, 'mnist_label', type='most_common')
MapperPlotter(Mapper, label=embedded, data=pca, type="forceNetwork", avg=FALSE, use_embedding=TRUE)
source('R/GridSearch.R')
data_with_label
source('R/GridSearch.R')
GridSearch(
filter_values = pca,
label = data_with_label$mnist_label,
column = 'Species',
cover_type = "stride",
width_vec = c(1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
use_embedding = TRUE,
)
pca
GridSearch(
filter_values = pca,
label = data_with_label$mnist_label,
column = 'Species',
cover_type = "stride",
width_vec = c(1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
use_embedding = TRUE,
)
GridSearch <- function(
filter_values,
label,
column,
cover_type = "stride",
width_vec = c(0.5, 1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "mapper_grid_outputs",
avg = FALSE,
use_embedding = FALSE
) {
dir.create(out_dir, showWarnings = FALSE)
if (use_embedding) {
data <- cbind(filter_values, label)
colnames(data)[ncol(data)] <- column
print(data)
}
for (w in width_vec) {
for (ov in overlap_vec) {
cat(sprintf("Cover=%s, Width=%.2f, Overlap=%d%%\n", cover_type, w, ov))
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_values,
percent_overlap = ov,
methods  = "dbscan",
method_params = list(eps = 0.3, minPts = 1),
cover_type = cover_type,
interval_width = w,
num_cores = num_cores
)
if (use_embedding) {
embedded <- ColorEmbedding(Mapper, original_data=data, column=column, type='most_common')
}
})
wdg <- MapperPlotter(
Mapper,
label = if (use_embedding) embedded else label,
filter_values,
type="forceNetwork",
avg=avg,
use_embedding=use_embedding
)
png_file <- file.path(out_dir, sprintf("mapper_%s_w%.2f_ov%02d.png", cover_type, w, ov))
save_mapper_png(wdg, png_file, vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
cat("Saved:", png_file, ", Elapsed:", time_taken["elapsed"], "sec\n")
gc()
}
}
}
GridSearch(
filter_values = pca,
label = data_with_label$mnist_label,
column = 'Species',
cover_type = "stride",
width_vec = c(1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
use_embedding = TRUE,
)
GridSearch <- function(
filter_values,
label,
column,
cover_type = "stride",
width_vec = c(0.5, 1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "mapper_grid_outputs",
avg = FALSE,
use_embedding = FALSE
) {
dir.create(out_dir, showWarnings = FALSE)
if (use_embedding) {
data <- cbind(filter_values, label)
colnames(data)[ncol(data)] <- column
}
for (w in width_vec) {
for (ov in overlap_vec) {
cat(sprintf("Cover=%s, Width=%.2f, Overlap=%d%%\n", cover_type, w, ov))
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = filter_values,
percent_overlap = ov,
methods  = "dbscan",
method_params = list(eps = 0.3, minPts = 1),
cover_type = cover_type,
interval_width = w,
num_cores = num_cores
)
if (use_embedding) {
embedded <- ColorEmbedding(Mapper, original_data=data, column=column, type='most_common')
}
})
wdg <- MapperPlotter(
Mapper,
label = if (use_embedding) embedded else label,
filter_values,
type="forceNetwork",
avg=avg,
use_embedding=use_embedding
)
png_file <- file.path(out_dir, sprintf("mapper_%s_w%.2f_ov%02d.png", cover_type, w, ov))
save_mapper_png(wdg, png_file, vwidth = 1400, vheight = 1000, zoom = 2, delay = 0.7)
cat("Saved:", png_file, ", Elapsed:", time_taken["elapsed"], "sec\n")
gc()
}
}
}
source('R/GridSearch.R')
pca
GridSearch(
filter_values = pca,
label = data_label,
column = 'Species',
cover_type = "stride",
width_vec = c(1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
use_embedding = TRUE,
)
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = pca,
percent_overlap = 20,
# methods = "dbscan",
# method_params = list(eps = 30, minPts = 5),
methods = "hierarchical",
method_params = list(num_bins_when_clustering = 15, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 5),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 0.4,
num_cores = 12
)
})
data_with_label
embedded <- ColorEmbedding(Mapper, data_with_label, 'mnist_label', type='most_common')
MapperPlotter(Mapper, label=embedded, data=pca, type="forceNetwork", avg=FALSE, use_embedding=TRUE)
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = pca,
percent_overlap = 10,
# methods = "dbscan",
# method_params = list(eps = 30, minPts = 5),
methods = "hierarchical",
method_params = list(num_bins_when_clustering = 15, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 5),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 0.4,
num_cores = 12
)
})
data_with_label
embedded <- ColorEmbedding(Mapper, data_with_label, 'mnist_label', type='most_common')
MapperPlotter(Mapper, label=embedded, data=pca, type="forceNetwork", avg=FALSE, use_embedding=TRUE)
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
source('R/EdgeVertices.R')
source('R/ConvertLevelsets.R')
source('R/Cover.R')
source('R/Cluster.R')
source('R/SimplicialComplex.R')
source('R/MapperAlgo.R')
data("iris")
data <- iris
filter_values <- iris[,1:4]
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = iris[,1:4],
# filter_values = circle_data[,2:3],
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 1, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
time_taken
source('R/ColorEmbedding.R')
embedded <- ColorEmbedding(Mapper, data, 'Species', type='most_common')
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=FALSE, use_embedding=TRUE)
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
data
embedded <- ColorEmbedding(Mapper, data, 'Petal.Length', type='mean')
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
MapperPlotter(Mapper, label=embedded, data=data, type="ggraph", avg=TRUE, use_embedding=TRUE)
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=FALSE, use_embedding=TRUE)
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
source('R/EdgeVertices.R')
source('R/ConvertLevelsets.R')
source('R/Cover.R')
source('R/Cluster.R')
source('R/SimplicialComplex.R')
source('R/MapperAlgo.R')
data("iris")
data <- iris
filter_values <- iris[,1:4]
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = iris[,1:4],
# filter_values = circle_data[,2:3],
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 1, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
time_taken
source('R/GridSearch.R')
GridSearch(
filter_values = filter_values,
label = data$Species,
column = 'Species',
cover_type = "stride",
width_vec = c(1.0, 1.5),
overlap_vec = c(10, 20, 30, 40),
num_cores = 12,
out_dir = "../mapper_grid_outputs",
use_embedding = TRUE,
)
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/ColorEmbedding.R')
embedded <- ColorEmbedding(Mapper, data, 'Petal.Length', type='mean')
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = iris[,1:4],
# filter_values = circle_data[,2:3],
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 1, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'extension',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
source('R/ColorEmbedding.R')
embedded <- ColorEmbedding(Mapper, data, 'Petal.Length', type='mean')
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = iris[,1:4],
# filter_values = circle_data[,2:3],
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 1, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
embedded <- ColorEmbedding(Mapper, data, 'Petal.Length', type='mean')
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
# read geojson
library(sf)
library(ggplot2)
library(dplyr)
library(ggspatial)
library(sf)
g <- st_read("~/Desktop/export.geojson", quiet = TRUE)
View(g)
g$telecom
g$geometry
library(sf)
g <- st_read("~/Desktop/export.geojson", quiet = TRUE)
View(g)
View(g)
library(sf)
g <- st_read("~/Desktop/export.geojson", quiet = TRUE)
install.packages('SimplicialComplex')
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
source('../MapperAlgo/R/EdgeVertices.R')
source('../MapperAlgo/R/ConvertLevelsets.R')
source('../MapperAlgo/R/Cover.R')
source('../MapperAlgo/R/Cluster.R')
source('../MapperAlgo/R/SimplicialComplex.R')
source('../MapperAlgo/R/MapperAlgo.R')
source('../MapperAlgo/R/ColorEmbedding.R')
source('../MapperAlgo/R/Plotter.R')
read_idx_images <- function(filename) {
f <- file(filename, "rb")
magic <- readBin(f, "integer", n = 1, size = 4, endian = "big")
n_images <- readBin(f, "integer", n = 1, size = 4, endian = "big")
n_rows   <- readBin(f, "integer", n = 1, size = 4, endian = "big")
n_cols   <- readBin(f, "integer", n = 1, size = 4, endian = "big")
cat("Magic:", magic, " Images:", n_images, " Size:", n_rows, "x", n_cols, "\n")
# Read all pixels
n_pixels <- n_images * n_rows * n_cols
data <- readBin(f, "integer", n = n_pixels, size = 1, signed = FALSE)
close(f)
# Convert to matrix: each row is an image
images <- matrix(data, ncol = n_rows * n_cols, byrow = TRUE)
return(list(
n_images = n_images,
n_rows = n_rows,
n_cols = n_cols,
images = images
))
}
read_idx_labels <- function(filename) {
f <- file(filename, "rb")
magic <- readBin(f, "integer", n = 1, size = 4, endian = "big")
n_labels <- readBin(f, "integer", n = 1, size = 4, endian = "big")
cat("Magic:", magic, " Labels:", n_labels, "\n")
labels <- readBin(f, "integer", n = n_labels, size = 1, signed = FALSE)
close(f)
return(labels)
}
mnist_images <- read_idx_images("../MNIST_ORG/t10k-images.idx3-ubyte")
mnist_label <- read_idx_labels("../MNIST_ORG/t10k-labels.idx1-ubyte")
library(ggplot2)
library(igraph)
library(networkD3)
library(parallel)
library(foreach)
library(doParallel)
library(htmlwidgets)
library(webshot)
library(tidygraph)
library(ggraph)
source('R/EdgeVertices.R')
source('R/ConvertLevelsets.R')
source('R/Cover.R')
source('R/Cluster.R')
source('R/SimplicialComplex.R')
source('R/MapperAlgo.R')
data("iris")
data <- iris
filter_values <- iris[,1:4]
time_taken <- system.time({
Mapper <- MapperAlgo(
filter_values = iris[,1:4],
# filter_values = circle_data[,2:3],
percent_overlap = 30,
methods = "dbscan",
method_params = list(eps = 1, minPts = 1),
# methods = "hierarchical",
# method_params = list(num_bins_when_clustering = 10, method = 'ward.D2'),
# methods = "kmeans",
# method_params = list(max_kmeans_clusters = 2),
# methods = "pam",
# method_params = list(num_clusters = 2),
cover_type = 'stride',
# intervals = 4,
interval_width = 1,
num_cores = 12
)
})
source('R/ColorEmbedding.R')
embedded <- ColorEmbedding(Mapper, data, 'Petal.Length', type='mean')
source('R/Plotter.R')
MapperPlotter(Mapper, label=embedded, data=data, type="forceNetwork", avg=TRUE, use_embedding=TRUE)
